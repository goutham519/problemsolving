// Binary search - always on sorted ones
divide array in to two halfs and see if element is present in which half, do recursively
if u dont know high and ssigning max = interger.max then make sure mid = low +(high-low)/2;

//lower bound
number is greater than or equal to passed number

//upper bound
number is lesser than or equal to passed number

//Floor and ceil

The floor of x is the largest element in the array which is smaller than or equal to x.
The ceiling of x is the smallest element in the array greater than or equal to x.

//first occurrence and last occurrence

use binary search if need to find the last occurrence use if num found the move start post the number

use binary search if need to find the last occurrence use if num found the move end before the number

//Find the count of number times repeated.

use fist occurrence and last occurrence


//find the element in rotated sorted array

use BS and check on every iteration for which part is sorted and move high and low accordingly


//find min in rotated array
min = max_val
check if low < high and if yes then take min(arr[low] ,min) else take the sorted part and check

//to find the number of times rotated

// find the index of minimum element

use the above approach

//search single occurrence element

use binary search
1,1,2,2,3,4,4,5,5,6,6
Start low and mid from 1 and n-1 element
check if mid is even or odd if even check if previous element is equal to it else move low to mid+1
else high to mid -1


// koko eating bananas
min eating per hour will be in between 1 and max element
use bs when finding the element.

//flower boquets with min days and k num of consequitive days
get min and max from array and get some value in between to see if we can prep boquote and also make sure we follow consequtive condition

// agressive cows placing between stalls- max of min distance

use binary search use low as starting element and high as last elem - start element and find if we accomadate the all the cows and return the last highest.
First, we will sort the given stalls[] array.
Place the 2 pointers i.e. low and high: Initially, we will place the pointers. The pointer low will point to 1 and the high will point to (stalls[n-1]-stalls[0]). As the ‘stalls[]’ is sorted, ‘stalls[n-1]’ refers to the maximum, and ‘stalls[0]’ is the minimum element.
Calculate the ‘mid’: Now, inside the loop, we will calculate the value of ‘mid’ using the following formula:
mid = (low+high) // 2 ( ‘//’ refers to integer division)
Eliminate the halves based on the boolean value returned by canWePlace():
We will pass the potential distance, represented by the variable 'mid', to the ‘canWePlace()' function. This function will return true if it is possible to place all the cows with a minimum distance of ‘mid’.
If the returned value is true: On satisfying this condition, we can conclude that the number ‘mid’ is one of our possible answers. But we want the maximum number. So, we will eliminate the left half and consider the right half(i.e. low = mid+1).
Otherwise, the value mid is greater than the distance we want. This means the numbers greater than ‘mid’ should not be considered and the right half of ‘mid’ consists of such numbers. So, we will eliminate the right half and consider the left half(i.e. high = mid-1).
Finally, outside the loop, we will return the value of high as the pointer will be pointing to the answer.


//min of maximum
//max of min
